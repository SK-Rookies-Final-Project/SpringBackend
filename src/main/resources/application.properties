##############application.properties##################
spring.application.name=springbackend

# --- Ohio Broker 접속 설정 (동적 SCRAM 방식) ---
# 주의: 고정된 계정 정보는 제거되었습니다.
# 모든 인증은 KafkaAuthenticationService에서 동적으로 처리됩니다.
spring.kafka.bootstrap-servers=${OHIO_KAFKA_BOOTSTRAP_SERVERS}
# spring.kafka.properties.security.protocol=SASL_PLAINTEXT
# spring.kafka.properties.sasl.mechanism=SCRAM-SHA-512
# spring.kafka.properties.sasl.jaas.config는 동적으로 설정됩니다.

# Consumer 설정
# 어떤 Consumer 그룹에 속할지 ID를 지정 + random.uuid로 계속 변경
spring.kafka.consumer.group-id=${CONSUMER_GROUP_ID}-${random.uuid}

# 실행할 때마다 오프셋을 0으로 초기화하고 처음부터 읽기
# spring.kafka.consumer.auto-offset-reset=earliest

# 값 직렬화/역직렬화(Kafka에 저장 된 데이터가 어떤 데이터인지 알려줌)
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# 커넥터 목록 확인




## --- JWT 설정 ---
jwt.secret=R3A0a3oPGI4qTYn7YTY1yC3X7xvQKZ8o+2Q8mU0lpM3eT+gvk9H+O5J1Yw9XjPjEfLWhF6QjvHqkUhH6a9d83kM2LbxYkqYrG5jC1HgFqN8=
jwt.expiration=86400000

# --- JDBC 연결 ---
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# --- 커넥션 풀(HikariCP) 옵션(권장) ---
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# --- JPA 설정 ---
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

